use("db_campus_alquiler");
db.createCollection("sucursal", {
    capped: true,
    size: 1300,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_sucursal", "nombre", "direccion", "telefono"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_sucursal: {
                    bsonType: "int",
                    description: "The id_sucursal field must be a number",
                },
                nombre: {
                    bsonType: "string",
                    description: "You must provide the nombre field, and it should be a string",
                },
                direccion: {
                    bsonType: "string",
                    description: "You must provide the direccion field, and it should be a string",
                },
                telefono: {
                    bsonType: "string",
                    description: "You must provide the telefono field, and it should be a string",
                },
            },
        },
    },
});

use("db_campus_alquiler");
db.sucursal.insertMany([
    {
        "id_sucursal": 1,
        "nombre": "Sucursal A",
        "direccion": "123 Main St",
        "telefono": "555-1234"
    },
    {
        "id_sucursal": 2,
        "nombre": "Sucursal B",
        "direccion": "456 Elm St",
        "telefono": "555-5678"
    },
    {
        "id_sucursal": 3,
        "nombre": "Sucursal C",
        "direccion": "789 Oak St",
        "telefono": "555-9876"
    },
    {
        "id_sucursal": 4,
        "nombre": "Sucursal D",
        "direccion": "321 Maple St",
        "telefono": "555-4321"
    },
    {
        "id_sucursal": 5,
        "nombre": "Sucursal E",
        "direccion": "654 Pine St",
        "telefono": "555-8765"
    }
]);

use("db_campus_alquiler");
db.createCollection("sucursal_automovil", {
    capped: true,
    size: 1000,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_sucursal_id", "id_automovil_id", "cantidad_disponible"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_sucursal_id: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20,
                    description: "The id_sucursal_id field must be a number and should be between 0 and 20"
                },
                id_automovil_id: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20,
                    description: "The id_automovil_id field must be a number and should be between 0 and 20"
                },
                cantidad_disponible: {
                    bsonType: "int",
                    minimum: 0,
                    description: "The cantidad_disponible field must be a number"
                }
            },
        },
    },
});

use("db_campus_alquiler");
db.sucursal_automovil.insertMany([
    {
        "id_sucursal_id": 1,
        "id_automovil_id": 1,
        "cantidad_disponible": 5
    },
    {
        "id_sucursal_id": 1,
        "id_automovil_id": 2,
        "cantidad_disponible": 3
    },
    {
        "id_sucursal_id": 2,
        "id_automovil_id": 3,
        "cantidad_disponible": 7
    },
    {
        "id_sucursal_id": 2,
        "id_automovil_id": 4,
        "cantidad_disponible": 2
    },
    {
        "id_sucursal_id": 3,
        "id_automovil_id": 5,
        "cantidad_disponible": 4
    }
]);

use("db_campus_alquiler");
db.createCollection("reserva", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_reserva", "id_cliente_id", "id_automovil_id", "fecha_reserva", "fecha_inicio", "fecha_fin", "estado"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_reserva: {
                    bsonType: "int",
                    description: "The id_reserva field must be a number"
                },
                id_cliente_id: {
                    bsonType: "int",
                    description: "The id_cliente_id field must be a number"
                },
                id_automovil_id: {
                    bsonType: "int",
                    description: "The id_automovil_id field must be a number"
                },
                fecha_reserva: {
                    bsonType: "date",
                    description: "You must provide the fecha_reserva field, and it should be a date data"
                },
                fecha_inicio: {
                    bsonType: "date",
                    description: "You must provide the fecha_inicio field, and it should be a date data"
                },
                fecha_fin: {
                    bsonType: "date",
                    description: "You must provide the fecha_fin field, and it should be a date data"
                },
                estado: {
                    bsonType: "string",
                    description: "You must provide the estado field, and it should be a string"
                }
            },
        },
    },
});

use("db_campus_alquiler");
db.reserva.insertMany([
    {
        "id_reserva": 1,
        "id_cliente_id": 3,
        "id_automovil_id": 6,
        "fecha_reserva": ISODate("2023-09-01"),
        "fecha_inicio": ISODate("2023-09-10"),
        "fecha_fin": ISODate("2023-09-17"),
        "estado": "Activo"
    },
    {
        "id_reserva": 2,
        "id_cliente_id": 1,
        "id_automovil_id": 3,
        "fecha_reserva": ISODate("2023-09-02"),
        "fecha_inicio": ISODate("2023-09-12"),
        "fecha_fin": ISODate("2023-09-19"),
        "estado": "Activo"
    },
    {
        "id_reserva": 3,
        "id_cliente_id": 2,
        "id_automovil_id": 5,
        "fecha_reserva": ISODate("2023-09-03"),
        "fecha_inicio": ISODate("2023-09-14"),
        "fecha_fin": ISODate("2023-09-21"),
        "estado": "Pendiente"
    },
    {
        "id_reserva": 4,
        "id_cliente_id": 1,
        "id_automovil_id": 2,
        "fecha_reserva": ISODate("2023-09-04"),
        "fecha_inicio": ISODate("2023-09-16"),
        "fecha_fin": ISODate("2023-09-23"),
        "estado": "Pendiente"
    },
    {
        "id_reserva": 5,
        "id_cliente_id": 3,
        "id_automovil_id": 4,
        "fecha_reserva": ISODate("2023-09-05"),
        "fecha_inicio": ISODate("2023-09-18"),
        "fecha_fin": ISODate("2023-09-25"),
        "estado": "Activo"
    }
]);

use("db_campus_alquiler");
db.createCollection("automovil", {
    capped: true,
    size: 1210,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_automovil", "marca", "modelo",  "anio", "tipo", "capacidad", "precio_diario"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_automovil: {
                    bsonType: "int",
                    description: "The id_automovil field must be a number"
                },
                marca: {
                    bsonType: "string",
                    description: "You must provide the marca field, and it should be a string",
                },
                modelo: {
                    bsonType: "string",
                    description: "You must provide the modelo field, and it should be a string",
                },
                anio: {
                    bsonType: "int",
                    description: "The anio field must be a number and should be a maximum of 2024"
                },
                tipo: {
                    bsonType: "string",
                    description: "You must provide the tipo field, and it should be a string",
                },
                capacidad: {
                    bsonType: "int",
                    description: "The capacidad field must be a number and should be a maximum of 8"
                },
                precio_diario: {
                    bsonType: "number",
                    description: "The precio_diario field must be a number"
                }
            },
        },
    },
});

use("db_campus_alquiler");
db.automovil.insertMany([
    {
        "id_automovil": 1,
        "marca": "Toyota",
        "modelo": "Corolla",
        "anio": 2022,
        "tipo": "Sedan",
        "capacidad": 5,
        "precio_diario": 5000000
    },
    {
        "id_automovil": 2,
        "marca": "Honda",
        "modelo": "Civic",
        "anio": 2023,
        "tipo": "Sedan",
        "capacidad": 5,
        "precio_diario": 5500000
    },
    {
        "id_automovil": 3,
        "marca": "Ford",
        "modelo": "Escape",
        "anio": 2023,
        "tipo": "SUV",
        "capacidad": 5,
        "precio_diario": 6000000
    },
    {
        "id_automovil": 4,
        "marca": "Chevrolet",
        "modelo": "Cruze",
        "anio": 2022,
        "tipo": "Sedan",
        "capacidad": 5,
        "precio_diario": 4800000
    },
    {
        "id_automovil": 5,
        "marca": "Nissan",
        "modelo": "Rogue",
        "anio": 2023,
        "tipo": "SUV",
        "capacidad": 5,
        "precio_diario": 5800000
    }
]);

use("db_campus_alquiler");
db.createCollection("cliente", {
    capped: true,
    size: 1600,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_cliente", "nombre", "apellido", "dni", "direccion", "telefono", "email"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_cliente: {
                    bsonType: "int",
                    description: "The id_cliente field must be a number"
                },
                nombre: {
                    bsonType: "string",
                    description: "You must provide the nombre field, and it should be a string"
                },
                apellido: {
                    bsonType: "string",
                    description: "You must provide the apellido field, and it should be a string"
                },
                dni: {
                    bsonType: "object",
                    properties: {
                        "cedula": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "You must provide the cedula field, and it should be a numeric string"
                        },
                        "pasaporte": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "You must provide the pasaporte field, and it should be a numeric string"
                        },
                        "cedula_extranjeria": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "You must provide the cedula_extranjeria field, and it should be a numeric string"
                        }
                    },
                    description: "The dni field must be an object with valid fields"
                },
                direccion: {
                    bsonType: "string",
                    description: "You must provide the direccion field, and it should be a string"
                },
                telefono: {
                    bsonType: "string",
                    description: "You must provide the telefono field, and it should be a numeric string"
                },
                email: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                    description: "You must provide a valid email field"
                }
            }
        }
    }
});

use("db_campus_alquiler");
db.cliente.insertMany([
    {
        "id_cliente": 1,
        "nombre": "Ana",
        "apellido": "Gomez",
        "dni": {
            "cedula": "12345678"
        },
        "direccion": "Calle 123, Ciudad",
        "telefono": "1234567890",
        "email": "ana@example.com"
    },
    {
        "id_cliente": 2,
        "nombre": "Carlos",
        "apellido": "Perez",
        "dni": {
            "pasaporte": "98765432"
        },
        "direccion": "Avenida XYZ, Ciudad",
        "telefono": "9876543210",
        "email": "carlos@example.com"
    },
    {
        "id_cliente": 3,
        "nombre": "Maria",
        "apellido": "Lopez",
        "dni": {
            "cedula_extranjeria": "56789012"
        },
        "direccion": "Plaza ABC, Ciudad",
        "telefono": "5678901234",
        "email": "maria@example.com"
    },
    {
        "id_cliente": 4,
        "nombre": "Luis",
        "apellido": "Rodriguez",
        "dni": {
            "cedula": "23456789"
        },
        "direccion": "Carrera 456, Ciudad",
        "telefono": "4567890123",
        "email": "luis@example.com"
    },
    {
        "id_cliente": 5,
        "nombre": "Laura",
        "apellido": "Fernandez",
        "dni": {
            "pasaporte": "56789012"
        },
        "direccion": "Calle Principal, Ciudad",
        "telefono": "5678901234",
        "email": "laura@example.com"
    }
]);

use("db_campus_alquiler");
db.createCollection("alquiler", {
    capped: true,
    size: 1500,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_alquiler", "id_cliente_id", "id_automovil_id", "fecha_inicio", "fecha_fin", "costo_total", "estado"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_alquiler: {
                    bsonType: "int",
                    description: "The id_alquiler field must be a number"
                },
                id_cliente_id: {
                    bsonType: "int",
                    description: "The id_cliente_id field must be a number"
                },
                id_automovil_id: {
                    bsonType: "int",
                    description: "The id_automovil_id field must be a number"
                },
                fecha_inicio: {
                    bsonType: "date",
                    description: "You must provide the fecha_inicio field, and it should be a date data"
                },
                fecha_fin: {
                    bsonType: "date",
                    description: "You must provide the fecha_fin field, and it should be a date data"
                },
                costo_total: {
                    bsonType: "number",
                    description: "The costo_total field must be a number"
                },
                estado: {
                    bsonType: "string",
                    description: "You must provide the estado field, and it should be a string"
                }
            },
        },
    },
});

use("db_campus_alquiler");
db.alquiler.insertMany([
    {
        "id_alquiler": 1,
        "id_cliente_id": 1,
        "id_automovil_id": 1,
        "fecha_inicio": ISODate("2023-08-15"),
        "fecha_fin": ISODate("2023-08-20"),
        "costo_total": 450000,
        "estado": "Activo"
    },
    {
        "id_alquiler": 2,
        "id_cliente_id": 2,
        "id_automovil_id": 3,
        "fecha_inicio": ISODate("2023-09-10"),
        "fecha_fin": ISODate("2023-09-15"),
        "costo_total": 550000,
        "estado": "Disponible"
    },
    {
        "id_alquiler": 3,
        "id_cliente_id": 1,
        "id_automovil_id": 2,
        "fecha_inicio": ISODate("2023-10-01"),
        "fecha_fin": ISODate("2023-10-05"),
        "costo_total": 320000,
        "estado": "Disponible"
    },
    {
        "id_alquiler": 4,
        "id_cliente_id": 3,
        "id_automovil_id": 5,
        "fecha_inicio": ISODate("2023-11-12"),
        "fecha_fin": ISODate("2023-11-18"),
        "costo_total": 680000,
        "estado": "Activo"
    },
    {
        "id_alquiler": 5,
        "id_cliente_id": 4,
        "id_automovil_id": 1,
        "fecha_inicio": ISODate("2023-12-05"),
        "fecha_fin": ISODate("2023-12-10"),
        "costo_total": 500000,
        "estado": "Pendiente"
    }
]);

use("db_campus_alquiler");
db.createCollection("registro_devolucion", {
    capped: true,
    size: 1600,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_registro", "id_alquiler_id", "id_empleado_id", "fecha_devolucion", "combustible_devuelto", "kilometraje_devuelto", "monto_adicional"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_registro: {
                    bsonType: "int",
                    description: "The id_registro field must be a number"
                },
                id_alquiler_id: {
                    bsonType: "int",
                    description: "The id_alquiler_id field must be a number"
                },
                id_empleado_id: {
                    bsonType: "int",
                    description: "The id_empleado_id field must be a number"
                },
                fecha_devolucion: {
                    bsonType: "date",
                    description: "You must provide the fecha_devolucion field, and it should be a date data",
                },
                combustible_devuelto: {
                    bsonType: "number",
                    description: "The combustible_devuelto field must be a number"
                },
                kilometraje_devuelto: {
                    bsonType: "number",
                    description: "The kilometraje_devuelto field must be a number"
                },
                monto_adicional: {
                    bsonType: "number",
                    description: "The monto_adicional field must be a number"
                }
            },
        },
    },
});

use("db_campus_alquiler");
db.registro_devolucion.insertMany([
    {
        "id_registro": 1,
        "id_alquiler_id": 1,
        "id_empleado_id": 1,
        "fecha_devolucion": ISODate("2023-08-20"),
        "combustible_devuelto": 28,
        "kilometraje_devuelto": 150,
        "monto_adicional": 100000
    },
    {
        "id_registro": 2,
        "id_alquiler_id": 2,
        "id_empleado_id": 2,
        "fecha_devolucion": ISODate("2023-09-15"),
        "combustible_devuelto": 20,
        "kilometraje_devuelto": 200,
        "monto_adicional": 500000
    },
    {
        "id_registro": 3,
        "id_alquiler_id": 3,
        "id_empleado_id": 1,
        "fecha_devolucion": ISODate("2023-10-05"),
        "combustible_devuelto": 35,
        "kilometraje_devuelto": 180,
        "monto_adicional": 100000
    },
    {
        "id_registro": 4,
        "id_alquiler_id": 4,
        "id_empleado_id": 3,
        "fecha_devolucion": ISODate("2023-11-18"),
        "combustible_devuelto": 45,
        "kilometraje_devuelto": 280,
        "monto_adicional": 400000
    },
    {
        "id_registro": 5,
        "id_alquiler_id": 5,
        "id_empleado_id": 4,
        "fecha_devolucion": ISODate("2023-12-10"),
        "combustible_devuelto": 30,
        "kilometraje_devuelto": 220,
        "monto_adicional": 200000
    }
]);

use("db_campus_alquiler");
db.createCollection("registro_entrega", {
    capped: true,
    size: 1300,
    max: 10,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_registro", "id_alquiler_id", "id_empleado_id", "fecha_entrega", "combustible_entregado", "kilometraje_entregado"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_registro: {
                    bsonType: "int",
                    description: "The id_registro field must be a number"
                },
                id_alquiler_id: {
                    bsonType: "int",
                    description: "The id_alquiler_id field must be a number"
                },
                id_empleado_id: {
                    bsonType: "int",
                    description: "The id_empleado_id field must be a number"
                },
                fecha_entrega: {
                    bsonType: "date",
                    description: "You must provide the fecha_entrega field, and it should be a date data",
                },
                combustible_entregado: {
                    bsonType: "number",
                    description: "The combustible_entregado field must be a number"
                },
                kilometraje_entregado: {
                    bsonType: "number",
                    description: "The kilometraje_entregado field must be a number"
                }
            },
        },
    },
});

use("db_campus_alquiler");
db.registro_entrega.insertMany([
    {
        "id_registro": 1,
        "id_alquiler_id": 1,
        "id_empleado_id": 1,
        "fecha_entrega": ISODate("2023-08-21"),
        "combustible_entregado": 25,
        "kilometraje_entregado": 130
    },
    {
        "id_registro": 2,
        "id_alquiler_id": 2,
        "id_empleado_id": 2,
        "fecha_entrega": ISODate("2023-09-16"),
        "combustible_entregado": 18,
        "kilometraje_entregado": 180
    },
    {
        "id_registro": 3,
        "id_alquiler_id": 3,
        "id_empleado_id": 1,
        "fecha_entrega": ISODate("2023-10-06"),
        "combustible_entregado": 30,
        "kilometraje_entregado": 150
    },
    {
        "id_registro": 4,
        "id_alquiler_id": 4,
        "id_empleado_id": 3,
        "fecha_entrega": ISODate("2023-11-19"),
        "combustible_entregado": 40,
        "kilometraje_entregado": 250
    },
    {
        "id_registro": 5,
        "id_alquiler_id": 5,
        "id_empleado_id": 4,
        "fecha_entrega": ISODate("2023-12-11"),
        "combustible_entregado": 28,
        "kilometraje_entregado": 200
    }
]);

use("db_campus_alquiler");
db.createCollection("empleado", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["id_empleado", "nombre", "apellido", "dni", "direccion", "telefono", "cargo"],
            properties: {
                _id: {
                    bsonType: 'objectId',
                },
                id_empleado: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20,
                    description: "The id_empleado field must be a number and should be between 0 and 20",
                },
                nombre: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "You must provide the nombre field, and it should be a string",
                },
                apellido: {
                    bsonType: "string",
                    pattern: "^[A-Za-z\\s]+$",
                    description: "You must provide the apellido field, and it should be a string",
                },
                dni: {
                    bsonType: "object",
                    properties: {
                        "cedula": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "You must provide the cedula field, and it should be a numeric string"
                        },
                        "pasaporte": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "You must provide the pasaporte field, and it should be a numeric string"
                        },
                        "cedula_extranjeria": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "You must provide the cedula_extranjeria field, and it should be a numeric string"
                        }
                    },
                    description: "The dni field must be an object with valid fields"
                },
                direccion: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                    description: "You must provide the direccion field, and it should be a string",
                },
                telefono: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                    description: "You must provide the telefono field, and it should be a string",
                },
                cargo: {
                    bsonType: "string",
                    description: "You must provide the cargo field, and it should be a string",
                },
            },
        },
    },
});

use("db_campus_alquiler");
db.empleado.insertMany([
    {
        "id_empleado": 1,
        "nombre": "Juan",
        "apellido": "Perez",
        "dni": {
            "cedula": "1234567890"
        },
        "direccion": "Calle 123, Ciudad",
        "telefono": "987654321",
        "cargo": "Gerente"
    },
    {
        "id_empleado": 2,
        "nombre": "Maria",
        "apellido": "Gonzalez",
        "dni": {
            "pasaporte": "9876543210"
        },
        "direccion": "Avenida 456, Ciudad",
        "telefono": "654987321",
        "cargo": "Supervisor"
    },
    {
        "id_empleado": 3,
        "nombre": "Carlos",
        "apellido": "Lopez",
        "dni": {
            "cedula_extranjeria": "2468135790"
        },
        "direccion": "Plaza 789, Ciudad",
        "telefono": "321654987",
        "cargo": "Asistente"
    },
    {
        "id_empleado": 4,
        "nombre": "Ana",
        "apellido": "Rodriguez",
        "dni": {
            "cedula": "9876543211"
        },
        "direccion": "Carrera 567, Ciudad",
        "telefono": "789456123",
        "cargo": "Recepcionista"
    },
    {
        "id_empleado": 5,
        "nombre": "Luis",
        "apellido": "Martinez",
        "dni": {
            "pasaporte": "5432109876"
        },
        "direccion": "Avenida 123, Ciudad",
        "telefono": "123456789",
        "cargo": "Conductor"
    }
]);


/* ---------------------------- METHODS --------------------- */

/* UPDATE */
use("db_campus_alquiler");
db.alquiler.updateMany(
    { Estado: "Aprobado" },
    { $set: { Estado: "Activo" } }
);
/* -------------------------------------------- QUERIES -------------------------------------- */

// 1. Show all the clients register in the database
use("db_campus_alquiler");
db.cliente.find({},{nombre:1, apellido:1, _id:0});

// 2. Get all the vehicles available for rent
use("db_campus_alquiler");
db.alquiler.find({ estado: { $eq: "Disponible" } });

// 3. List all active rentals along with the details of the related customers
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "id_cliente",
            foreignField: "id_cliente_id",
            as: "data_Alquiler"
        }
    },
    {
        $project: {
          "data_Alquiler._id":0,
          "data_Alquiler.id_cliente_id":0,
          "data_Alquiler.id_automovil_id":0,
          "data_Alquiler.costo_total":0,
        }
    },
    {
        $match: {
            "data_Alquiler.estado": { $eq: "Activo" }
        }
    },
    {
        $unwind: "$data_Alquiler"
    },
    {
        $group: {
            _id: "$_id",
            ID_Cliente:{$first:"$id_cliente"},
            Nombre:{$first:"$nombre"},
            Apellido:{$first:"$apellido"},
            DNI:{$first:"$dni"},
            Direccion:{$first:"$direccion"},
            Telefono:{$first:"$telefono"},
            Email:{$first:"$email"},
            data_Alquiler:{$first:"$data_Alquiler"}
        }
    }
]);

// 4. Show all pending reservations with customer data and the reserved car.
use("db_campus_alquiler");
db.reserva.aggregate([
    {
      $lookup: {
        from: "cliente",
        localField: "id_cliente_id",
        foreignField: "id_cliente",
        as: "data_Cliente"
      }
    },
    {
        $project: {
          "data_Cliente._id":0,
          "data_Cliente.id_cliente":0,
          "data_Cliente.dni":0
        }
    },
    {
        $match: {
            estado: { $eq: "Pendiente" }
        }
    },
    {
      $unwind: "$data_Cliente"
    }
  ]);
  
//5. Get the rental details with the specific ID_Alquiler.
use("db_campus_alquiler");
db.alquiler.find({ID_Alquiler: 6});

//6. List the employees with the position of "Vendedor"
use("db_campus_alquiler");
db.empleado.aggregate([
    {
        $match:{
            Cargo: {$eq: "Vendedor"}
        }
    },
    {
        $project: {
          "_id": 0,
          "ID_Empleado":1,
          "Nombre":1,
          "Apellido":1,
          "Cargo":1
        }
    }
]);

//7. Show the total number of cars available in each branch.
use("db_campus_alquiler");
db.sucursal.aggregate([
    {
        $lookup: {
          from: "sucursal_automovil",
          localField: "ID_Sucursal",
          foreignField: "ID_Sucursal",
          as: "data_Sucursal"
        }
    },
    {
        $unwind: "$data_Sucursal"
    },
    {
        $group: {
          _id: "$data_Sucursal.ID_Sucursal",
          total_Automoviles: {$sum: "$data_Sucursal.Cantidad_Disponible"}
        }
    },
    {
        $project: {
          "_id": 0,
          "ID_Sucursal": "$_id",
          "Nombre": 1,
          "Total_Automoviles": "$total_Automoviles"
        }
    },
    { $sort: { ID_Sucursal: 1 } }
]);

//8. Get the total cost of a specific "alquiler".
use("db_campus_alquiler");
db.alquiler.find({ID_Alquiler: 3},{_id:0, ID_Alquiler:1, Costo_Total:1});

//9.List the clients with the specific "DNI".
use("db_campus_alquiler");
db.cliente.find({DNI: "M1234567N"},{_id:0, ID_Cliente:1, Nombre:1, Apellido:1, DNI:1, Telefono:1});

//10. Show all cars with a capacity greater than 5 people.
use("db_campus_alquiler");
db.automovil.find({ Capacidad: { $gte: 5 } },{_id:0,});

//11. Get the details of the rental that has a start date of '2023-07-05'
use("db_campus_alquiler");
db.alquiler.find({Fecha_Inicio:'2023-07-05'},{_id:0});

//12. List pending reservations made by a client specific
use("db_campus_alquiler");
db.reserva.find({ID_Cliente: 1, Estado: "Pendiente"});

//13. Show the employees with title of "Gerente" o "Asistente". 
use("db_campus_alquiler");
db.empleado.find({ Cargo:{ $in: ["Gerente", "Asistente"]}});

//14. Get the data of the clients who made at least one rent (alquiler).
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $lookup: {
            from: "alquiler",
            localField: "ID_Cliente",
            foreignField: "ID_Cliente",
            as: "data_Alquiler"
        }
    },
    {
        $project: {
            "_id" : 0,
            "Direccion" : 0,
            "Telefono":0,
            "Email":0,
            "data_Alquiler._id":0,
            "data_Alquiler.ID_Cliente":0,
            "data_Alquiler.Costo_Total":0,
        }
    },
    {
        $match: {
            data_Alquiler: { $ne: [] }
        }
    }
]);

//15. List all cars sorted by brand and model.
use("db_campus_alquiler");
db.automovil.aggregate([
    {
        $project:{
            "_id": 0,
        }
    },
    {
        $sort:{
            "Marca": 1,
            "Modelo": 1
        }
    }
]);

//16. Show the total number of cars at each branch along with their address.
use("db_campus_alquiler");
db.sucursal.aggregate([
    {
        $lookup: {
          from: "sucursal_automovil",
          localField: "ID_Sucursal",
          foreignField: "ID_Sucursal",
          as: "data_Automoviles"
        }
    },
    {
        $addFields: {
          "total_Automoviles": { $sum: "$data_Automoviles.Cantidad_Disponible" }
        }
    },
    {
        $project: {
          "_id": 0,
          "Telefono": 0,
          "data_Automoviles._id": 0,
          "data_Automoviles.ID_Sucursal": 0,
        }
    }
]);

//17. Get the total number of rentals recorded in the database.
use("db_campus_alquiler");
db.alquiler.countDocuments();

//18. Show all the cars with a capacity of 5 people that are currently available.
use("db_campus_alquiler");
db.automovil.aggregate([
    {
        $lookup: {
          from: "alquiler",
          localField: "ID_Automovil",
          foreignField: "ID_Automovil_id",
          as: "data_Alquiler"
        }
    },
    {
        $match: {
          "data_Alquiler.Estado":"Disponible",
          "Capacidad":{$gte: 5}
        }
    },
    {
        $project: {
          "_id":0,
          "data_Alquiler._id": 0,
          "data_Alquiler.ID_Automovil_id": 0
        }
    }
]);

//19.List the rentals with a start date between '2023-07-05' and '2023-07-10'.
use("db_campus_alquiler");
db.alquiler.aggregate([
    {
        $match: {
            Fecha_Inicio: {
                $gte: "2023-07-05",
                $lte: "2023-07-10"
            }
        }
    },
    { $project: {"_id":0} },
    { $sort: {Fecha_Inicio: 1}}
]);
